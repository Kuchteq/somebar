diff --git a/src/bar.cpp b/src/bar.cpp
index 507ce62..dc68b2f 100644
--- a/src/bar.cpp
+++ b/src/bar.cpp
@@ -225,7 +225,7 @@ void Bar::render()
 	_x = 0;
 
 	renderTags();
-	setColorScheme(_selected ? colorActive : colorInactive);
+	setColorScheme(_selected ? colorActiveBar : colorInactive);
 	renderComponent(_layoutCmp);
 	renderComponent(_titleCmp);
 	renderStatus();
@@ -240,13 +240,35 @@ void Bar::render()
 
 void Bar::renderTags()
 {
+	// Check if all tags are active (Mod+0)
+	bool allActive = true;
 	for (auto &tag : _tags) {
-		setColorScheme(
-			tag.state & TagState::Active ? colorActive : colorInactive,
+		if (tag.state & TagState::Active){
+			if (!allActive){
+				allActive = true;
+				break;
+			}
+			allActive = false;
+		}
+	}
+
+	bool renderThis;
+	for (auto &tag : _tags) {
+		renderThis = false;
+		setColorScheme(tag.state & TagState::Active ? (_selected ? colorActiveTag : colorActiveTagPrevMon) : colorInactive,
 			tag.state & TagState::Urgent);
-		renderComponent(tag.component);
+		// Reder active tag if it's the only one active
+		if (!allActive && tag.state & TagState::Active)
+			renderThis = true;
 		auto indicators = std::min(tag.numClients, static_cast<int>(_bufs->height/2));
 		for (auto ind = 0; ind < indicators; ind++) {
+			// render tags having indicators
+			if (tag.focusedClient == -1)
+				renderThis = true;
+			// render tags having the focused client
+			if (tag.focusedClient == 0){
+				renderThis = true;
+			}
 			auto w = ind == tag.focusedClient ? 7 : 1;
 			cairo_move_to(_painter, tag.component.x, ind*2+0.5);
 			cairo_rel_line_to(_painter, w, 0);
@@ -254,6 +276,8 @@ void Bar::renderTags()
 			cairo_set_line_width(_painter, 1);
 			cairo_stroke(_painter);
 		}
+		if (renderThis)
+			renderComponent(tag.component);
 	}
 }
 
